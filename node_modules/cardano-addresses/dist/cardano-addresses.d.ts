/// <reference path="src/foreign.d.ts" />
/**
 * Typescript bindings for `Cardano.Address`.
 *
 * @module
 */
import { Address, XPub, InspectAddress } from './types';
import { CardanoAddressesApi } from './foreign';
/**
 * Get information about a Cardano address. Three address formats are
 * supported: Shelley, Icarus, and Byron.
 *
 * If the address can't be parsed, the promise will be rejected with
 * [[ErrInspectAddress]].
 *
 * @param address the address to inspect.
 * @param rootXPub an optional bech32-encoded root extended public
 *   key. This only applies to Byron addresses, and is for decrypting
 *   the {@link InspectAddressByron.payload} field.
 * @returns The fields parsed from the address.
 */
export declare function inspectAddress(address: Address, rootXPub?: XPub): Promise<InspectAddress>;
/**
 * @returns The Cabal package version string and git revision.
 */
export declare function version(): Promise<string>;
/**
 * Start the cardano-addresses runtime system.
 *
 * There is no need to call this because it's done automatically the
 * first time a library function is used.
 *
 * @internal
 */
export declare function init(): Promise<CardanoAddressesApi>;
/**
 * De-allocates resources used for the runtime system.
 *
 * @internal
 */
export declare function cleanup(): void;
